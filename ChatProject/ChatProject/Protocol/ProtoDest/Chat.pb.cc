// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Chat.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "Chat.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* CS_HEART_BEAT_REQ_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CS_HEART_BEAT_REQ_reflection_ = NULL;
const ::google::protobuf::Descriptor* SC_HEART_BEAT_RSP_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SC_HEART_BEAT_RSP_reflection_ = NULL;
const ::google::protobuf::Descriptor* CS_LOGIN_REQ_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CS_LOGIN_REQ_reflection_ = NULL;
const ::google::protobuf::Descriptor* SC_LOGIN_RSP_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SC_LOGIN_RSP_reflection_ = NULL;
const ::google::protobuf::Descriptor* CS_REGISTER_REQ_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CS_REGISTER_REQ_reflection_ = NULL;
const ::google::protobuf::Descriptor* SC_REGISTER_RSP_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SC_REGISTER_RSP_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Message_ID_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_Chat_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_Chat_2eproto() {
  protobuf_AddDesc_Chat_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "Chat.proto");
  GOOGLE_CHECK(file != NULL);
  CS_HEART_BEAT_REQ_descriptor_ = file->message_type(0);
  static const int CS_HEART_BEAT_REQ_offsets_[1] = {
  };
  CS_HEART_BEAT_REQ_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CS_HEART_BEAT_REQ_descriptor_,
      CS_HEART_BEAT_REQ::default_instance_,
      CS_HEART_BEAT_REQ_offsets_,
      -1,
      -1,
      -1,
      sizeof(CS_HEART_BEAT_REQ),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CS_HEART_BEAT_REQ, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CS_HEART_BEAT_REQ, _is_default_instance_));
  SC_HEART_BEAT_RSP_descriptor_ = file->message_type(1);
  static const int SC_HEART_BEAT_RSP_offsets_[1] = {
  };
  SC_HEART_BEAT_RSP_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SC_HEART_BEAT_RSP_descriptor_,
      SC_HEART_BEAT_RSP::default_instance_,
      SC_HEART_BEAT_RSP_offsets_,
      -1,
      -1,
      -1,
      sizeof(SC_HEART_BEAT_RSP),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_HEART_BEAT_RSP, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_HEART_BEAT_RSP, _is_default_instance_));
  CS_LOGIN_REQ_descriptor_ = file->message_type(2);
  static const int CS_LOGIN_REQ_offsets_[1] = {
  };
  CS_LOGIN_REQ_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CS_LOGIN_REQ_descriptor_,
      CS_LOGIN_REQ::default_instance_,
      CS_LOGIN_REQ_offsets_,
      -1,
      -1,
      -1,
      sizeof(CS_LOGIN_REQ),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CS_LOGIN_REQ, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CS_LOGIN_REQ, _is_default_instance_));
  SC_LOGIN_RSP_descriptor_ = file->message_type(3);
  static const int SC_LOGIN_RSP_offsets_[1] = {
  };
  SC_LOGIN_RSP_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SC_LOGIN_RSP_descriptor_,
      SC_LOGIN_RSP::default_instance_,
      SC_LOGIN_RSP_offsets_,
      -1,
      -1,
      -1,
      sizeof(SC_LOGIN_RSP),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_LOGIN_RSP, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_LOGIN_RSP, _is_default_instance_));
  CS_REGISTER_REQ_descriptor_ = file->message_type(4);
  static const int CS_REGISTER_REQ_offsets_[1] = {
  };
  CS_REGISTER_REQ_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CS_REGISTER_REQ_descriptor_,
      CS_REGISTER_REQ::default_instance_,
      CS_REGISTER_REQ_offsets_,
      -1,
      -1,
      -1,
      sizeof(CS_REGISTER_REQ),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CS_REGISTER_REQ, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CS_REGISTER_REQ, _is_default_instance_));
  SC_REGISTER_RSP_descriptor_ = file->message_type(5);
  static const int SC_REGISTER_RSP_offsets_[1] = {
  };
  SC_REGISTER_RSP_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SC_REGISTER_RSP_descriptor_,
      SC_REGISTER_RSP::default_instance_,
      SC_REGISTER_RSP_offsets_,
      -1,
      -1,
      -1,
      sizeof(SC_REGISTER_RSP),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_REGISTER_RSP, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SC_REGISTER_RSP, _is_default_instance_));
  Message_ID_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_Chat_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CS_HEART_BEAT_REQ_descriptor_, &CS_HEART_BEAT_REQ::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SC_HEART_BEAT_RSP_descriptor_, &SC_HEART_BEAT_RSP::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CS_LOGIN_REQ_descriptor_, &CS_LOGIN_REQ::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SC_LOGIN_RSP_descriptor_, &SC_LOGIN_RSP::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CS_REGISTER_REQ_descriptor_, &CS_REGISTER_REQ::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SC_REGISTER_RSP_descriptor_, &SC_REGISTER_RSP::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_Chat_2eproto() {
  delete CS_HEART_BEAT_REQ::default_instance_;
  delete CS_HEART_BEAT_REQ_reflection_;
  delete SC_HEART_BEAT_RSP::default_instance_;
  delete SC_HEART_BEAT_RSP_reflection_;
  delete CS_LOGIN_REQ::default_instance_;
  delete CS_LOGIN_REQ_reflection_;
  delete SC_LOGIN_RSP::default_instance_;
  delete SC_LOGIN_RSP_reflection_;
  delete CS_REGISTER_REQ::default_instance_;
  delete CS_REGISTER_REQ_reflection_;
  delete SC_REGISTER_RSP::default_instance_;
  delete SC_REGISTER_RSP_reflection_;
}

void protobuf_AddDesc_Chat_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_Chat_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\nChat.proto\"\023\n\021CS_HEART_BEAT_REQ\"\023\n\021SC_"
    "HEART_BEAT_RSP\"\016\n\014CS_LOGIN_REQ\"\016\n\014SC_LOG"
    "IN_RSP\"\021\n\017CS_REGISTER_REQ\"\021\n\017SC_REGISTER"
    "_RSP*\251\001\n\nMessage_ID\022\r\n\tERROR_NUM\020\000\022\030\n\023CS"
    "ID_HEART_BEAT_REQ\020\221N\022\030\n\023SCID_HEART_BEAT_"
    "RSP\020\222N\022\023\n\016CSID_LOGIN_REQ\020\223N\022\023\n\016SCID_LOGI"
    "N_RSP\020\224N\022\026\n\021CSID_REGISTER_REQ\020\225N\022\026\n\021SCID"
    "_REGISTER_RSP\020\226Nb\006proto3", 304);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "Chat.proto", &protobuf_RegisterTypes);
  CS_HEART_BEAT_REQ::default_instance_ = new CS_HEART_BEAT_REQ();
  SC_HEART_BEAT_RSP::default_instance_ = new SC_HEART_BEAT_RSP();
  CS_LOGIN_REQ::default_instance_ = new CS_LOGIN_REQ();
  SC_LOGIN_RSP::default_instance_ = new SC_LOGIN_RSP();
  CS_REGISTER_REQ::default_instance_ = new CS_REGISTER_REQ();
  SC_REGISTER_RSP::default_instance_ = new SC_REGISTER_RSP();
  CS_HEART_BEAT_REQ::default_instance_->InitAsDefaultInstance();
  SC_HEART_BEAT_RSP::default_instance_->InitAsDefaultInstance();
  CS_LOGIN_REQ::default_instance_->InitAsDefaultInstance();
  SC_LOGIN_RSP::default_instance_->InitAsDefaultInstance();
  CS_REGISTER_REQ::default_instance_->InitAsDefaultInstance();
  SC_REGISTER_RSP::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_Chat_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_Chat_2eproto {
  StaticDescriptorInitializer_Chat_2eproto() {
    protobuf_AddDesc_Chat_2eproto();
  }
} static_descriptor_initializer_Chat_2eproto_;
const ::google::protobuf::EnumDescriptor* Message_ID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Message_ID_descriptor_;
}
bool Message_ID_IsValid(int value) {
  switch(value) {
    case 0:
    case 10001:
    case 10002:
    case 10003:
    case 10004:
    case 10005:
    case 10006:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CS_HEART_BEAT_REQ::CS_HEART_BEAT_REQ()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CS_HEART_BEAT_REQ)
}

void CS_HEART_BEAT_REQ::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

CS_HEART_BEAT_REQ::CS_HEART_BEAT_REQ(const CS_HEART_BEAT_REQ& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CS_HEART_BEAT_REQ)
}

void CS_HEART_BEAT_REQ::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
}

CS_HEART_BEAT_REQ::~CS_HEART_BEAT_REQ() {
  // @@protoc_insertion_point(destructor:CS_HEART_BEAT_REQ)
  SharedDtor();
}

void CS_HEART_BEAT_REQ::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CS_HEART_BEAT_REQ::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CS_HEART_BEAT_REQ::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CS_HEART_BEAT_REQ_descriptor_;
}

const CS_HEART_BEAT_REQ& CS_HEART_BEAT_REQ::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Chat_2eproto();
  return *default_instance_;
}

CS_HEART_BEAT_REQ* CS_HEART_BEAT_REQ::default_instance_ = NULL;

CS_HEART_BEAT_REQ* CS_HEART_BEAT_REQ::New(::google::protobuf::Arena* arena) const {
  CS_HEART_BEAT_REQ* n = new CS_HEART_BEAT_REQ;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CS_HEART_BEAT_REQ::Clear() {
// @@protoc_insertion_point(message_clear_start:CS_HEART_BEAT_REQ)
}

bool CS_HEART_BEAT_REQ::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CS_HEART_BEAT_REQ)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
  }
success:
  // @@protoc_insertion_point(parse_success:CS_HEART_BEAT_REQ)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CS_HEART_BEAT_REQ)
  return false;
#undef DO_
}

void CS_HEART_BEAT_REQ::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CS_HEART_BEAT_REQ)
  // @@protoc_insertion_point(serialize_end:CS_HEART_BEAT_REQ)
}

::google::protobuf::uint8* CS_HEART_BEAT_REQ::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CS_HEART_BEAT_REQ)
  // @@protoc_insertion_point(serialize_to_array_end:CS_HEART_BEAT_REQ)
  return target;
}

int CS_HEART_BEAT_REQ::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:CS_HEART_BEAT_REQ)
  int total_size = 0;

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CS_HEART_BEAT_REQ::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CS_HEART_BEAT_REQ)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const CS_HEART_BEAT_REQ* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CS_HEART_BEAT_REQ>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CS_HEART_BEAT_REQ)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CS_HEART_BEAT_REQ)
    MergeFrom(*source);
  }
}

void CS_HEART_BEAT_REQ::MergeFrom(const CS_HEART_BEAT_REQ& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CS_HEART_BEAT_REQ)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
}

void CS_HEART_BEAT_REQ::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CS_HEART_BEAT_REQ)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CS_HEART_BEAT_REQ::CopyFrom(const CS_HEART_BEAT_REQ& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CS_HEART_BEAT_REQ)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CS_HEART_BEAT_REQ::IsInitialized() const {

  return true;
}

void CS_HEART_BEAT_REQ::Swap(CS_HEART_BEAT_REQ* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CS_HEART_BEAT_REQ::InternalSwap(CS_HEART_BEAT_REQ* other) {
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CS_HEART_BEAT_REQ::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CS_HEART_BEAT_REQ_descriptor_;
  metadata.reflection = CS_HEART_BEAT_REQ_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CS_HEART_BEAT_REQ

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SC_HEART_BEAT_RSP::SC_HEART_BEAT_RSP()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SC_HEART_BEAT_RSP)
}

void SC_HEART_BEAT_RSP::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

SC_HEART_BEAT_RSP::SC_HEART_BEAT_RSP(const SC_HEART_BEAT_RSP& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SC_HEART_BEAT_RSP)
}

void SC_HEART_BEAT_RSP::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
}

SC_HEART_BEAT_RSP::~SC_HEART_BEAT_RSP() {
  // @@protoc_insertion_point(destructor:SC_HEART_BEAT_RSP)
  SharedDtor();
}

void SC_HEART_BEAT_RSP::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SC_HEART_BEAT_RSP::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SC_HEART_BEAT_RSP::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SC_HEART_BEAT_RSP_descriptor_;
}

const SC_HEART_BEAT_RSP& SC_HEART_BEAT_RSP::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Chat_2eproto();
  return *default_instance_;
}

SC_HEART_BEAT_RSP* SC_HEART_BEAT_RSP::default_instance_ = NULL;

SC_HEART_BEAT_RSP* SC_HEART_BEAT_RSP::New(::google::protobuf::Arena* arena) const {
  SC_HEART_BEAT_RSP* n = new SC_HEART_BEAT_RSP;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SC_HEART_BEAT_RSP::Clear() {
// @@protoc_insertion_point(message_clear_start:SC_HEART_BEAT_RSP)
}

bool SC_HEART_BEAT_RSP::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SC_HEART_BEAT_RSP)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
  }
success:
  // @@protoc_insertion_point(parse_success:SC_HEART_BEAT_RSP)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SC_HEART_BEAT_RSP)
  return false;
#undef DO_
}

void SC_HEART_BEAT_RSP::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SC_HEART_BEAT_RSP)
  // @@protoc_insertion_point(serialize_end:SC_HEART_BEAT_RSP)
}

::google::protobuf::uint8* SC_HEART_BEAT_RSP::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SC_HEART_BEAT_RSP)
  // @@protoc_insertion_point(serialize_to_array_end:SC_HEART_BEAT_RSP)
  return target;
}

int SC_HEART_BEAT_RSP::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:SC_HEART_BEAT_RSP)
  int total_size = 0;

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SC_HEART_BEAT_RSP::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SC_HEART_BEAT_RSP)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const SC_HEART_BEAT_RSP* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const SC_HEART_BEAT_RSP>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SC_HEART_BEAT_RSP)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SC_HEART_BEAT_RSP)
    MergeFrom(*source);
  }
}

void SC_HEART_BEAT_RSP::MergeFrom(const SC_HEART_BEAT_RSP& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SC_HEART_BEAT_RSP)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
}

void SC_HEART_BEAT_RSP::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SC_HEART_BEAT_RSP)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SC_HEART_BEAT_RSP::CopyFrom(const SC_HEART_BEAT_RSP& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC_HEART_BEAT_RSP)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SC_HEART_BEAT_RSP::IsInitialized() const {

  return true;
}

void SC_HEART_BEAT_RSP::Swap(SC_HEART_BEAT_RSP* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SC_HEART_BEAT_RSP::InternalSwap(SC_HEART_BEAT_RSP* other) {
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SC_HEART_BEAT_RSP::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SC_HEART_BEAT_RSP_descriptor_;
  metadata.reflection = SC_HEART_BEAT_RSP_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SC_HEART_BEAT_RSP

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CS_LOGIN_REQ::CS_LOGIN_REQ()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CS_LOGIN_REQ)
}

void CS_LOGIN_REQ::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

CS_LOGIN_REQ::CS_LOGIN_REQ(const CS_LOGIN_REQ& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CS_LOGIN_REQ)
}

void CS_LOGIN_REQ::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
}

CS_LOGIN_REQ::~CS_LOGIN_REQ() {
  // @@protoc_insertion_point(destructor:CS_LOGIN_REQ)
  SharedDtor();
}

void CS_LOGIN_REQ::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CS_LOGIN_REQ::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CS_LOGIN_REQ::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CS_LOGIN_REQ_descriptor_;
}

const CS_LOGIN_REQ& CS_LOGIN_REQ::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Chat_2eproto();
  return *default_instance_;
}

CS_LOGIN_REQ* CS_LOGIN_REQ::default_instance_ = NULL;

CS_LOGIN_REQ* CS_LOGIN_REQ::New(::google::protobuf::Arena* arena) const {
  CS_LOGIN_REQ* n = new CS_LOGIN_REQ;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CS_LOGIN_REQ::Clear() {
// @@protoc_insertion_point(message_clear_start:CS_LOGIN_REQ)
}

bool CS_LOGIN_REQ::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CS_LOGIN_REQ)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
  }
success:
  // @@protoc_insertion_point(parse_success:CS_LOGIN_REQ)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CS_LOGIN_REQ)
  return false;
#undef DO_
}

void CS_LOGIN_REQ::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CS_LOGIN_REQ)
  // @@protoc_insertion_point(serialize_end:CS_LOGIN_REQ)
}

::google::protobuf::uint8* CS_LOGIN_REQ::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CS_LOGIN_REQ)
  // @@protoc_insertion_point(serialize_to_array_end:CS_LOGIN_REQ)
  return target;
}

int CS_LOGIN_REQ::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:CS_LOGIN_REQ)
  int total_size = 0;

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CS_LOGIN_REQ::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CS_LOGIN_REQ)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const CS_LOGIN_REQ* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CS_LOGIN_REQ>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CS_LOGIN_REQ)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CS_LOGIN_REQ)
    MergeFrom(*source);
  }
}

void CS_LOGIN_REQ::MergeFrom(const CS_LOGIN_REQ& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CS_LOGIN_REQ)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
}

void CS_LOGIN_REQ::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CS_LOGIN_REQ)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CS_LOGIN_REQ::CopyFrom(const CS_LOGIN_REQ& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CS_LOGIN_REQ)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CS_LOGIN_REQ::IsInitialized() const {

  return true;
}

void CS_LOGIN_REQ::Swap(CS_LOGIN_REQ* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CS_LOGIN_REQ::InternalSwap(CS_LOGIN_REQ* other) {
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CS_LOGIN_REQ::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CS_LOGIN_REQ_descriptor_;
  metadata.reflection = CS_LOGIN_REQ_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CS_LOGIN_REQ

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SC_LOGIN_RSP::SC_LOGIN_RSP()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SC_LOGIN_RSP)
}

void SC_LOGIN_RSP::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

SC_LOGIN_RSP::SC_LOGIN_RSP(const SC_LOGIN_RSP& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SC_LOGIN_RSP)
}

void SC_LOGIN_RSP::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
}

SC_LOGIN_RSP::~SC_LOGIN_RSP() {
  // @@protoc_insertion_point(destructor:SC_LOGIN_RSP)
  SharedDtor();
}

void SC_LOGIN_RSP::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SC_LOGIN_RSP::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SC_LOGIN_RSP::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SC_LOGIN_RSP_descriptor_;
}

const SC_LOGIN_RSP& SC_LOGIN_RSP::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Chat_2eproto();
  return *default_instance_;
}

SC_LOGIN_RSP* SC_LOGIN_RSP::default_instance_ = NULL;

SC_LOGIN_RSP* SC_LOGIN_RSP::New(::google::protobuf::Arena* arena) const {
  SC_LOGIN_RSP* n = new SC_LOGIN_RSP;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SC_LOGIN_RSP::Clear() {
// @@protoc_insertion_point(message_clear_start:SC_LOGIN_RSP)
}

bool SC_LOGIN_RSP::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SC_LOGIN_RSP)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
  }
success:
  // @@protoc_insertion_point(parse_success:SC_LOGIN_RSP)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SC_LOGIN_RSP)
  return false;
#undef DO_
}

void SC_LOGIN_RSP::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SC_LOGIN_RSP)
  // @@protoc_insertion_point(serialize_end:SC_LOGIN_RSP)
}

::google::protobuf::uint8* SC_LOGIN_RSP::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SC_LOGIN_RSP)
  // @@protoc_insertion_point(serialize_to_array_end:SC_LOGIN_RSP)
  return target;
}

int SC_LOGIN_RSP::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:SC_LOGIN_RSP)
  int total_size = 0;

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SC_LOGIN_RSP::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SC_LOGIN_RSP)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const SC_LOGIN_RSP* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const SC_LOGIN_RSP>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SC_LOGIN_RSP)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SC_LOGIN_RSP)
    MergeFrom(*source);
  }
}

void SC_LOGIN_RSP::MergeFrom(const SC_LOGIN_RSP& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SC_LOGIN_RSP)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
}

void SC_LOGIN_RSP::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SC_LOGIN_RSP)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SC_LOGIN_RSP::CopyFrom(const SC_LOGIN_RSP& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC_LOGIN_RSP)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SC_LOGIN_RSP::IsInitialized() const {

  return true;
}

void SC_LOGIN_RSP::Swap(SC_LOGIN_RSP* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SC_LOGIN_RSP::InternalSwap(SC_LOGIN_RSP* other) {
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SC_LOGIN_RSP::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SC_LOGIN_RSP_descriptor_;
  metadata.reflection = SC_LOGIN_RSP_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SC_LOGIN_RSP

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CS_REGISTER_REQ::CS_REGISTER_REQ()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CS_REGISTER_REQ)
}

void CS_REGISTER_REQ::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

CS_REGISTER_REQ::CS_REGISTER_REQ(const CS_REGISTER_REQ& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CS_REGISTER_REQ)
}

void CS_REGISTER_REQ::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
}

CS_REGISTER_REQ::~CS_REGISTER_REQ() {
  // @@protoc_insertion_point(destructor:CS_REGISTER_REQ)
  SharedDtor();
}

void CS_REGISTER_REQ::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CS_REGISTER_REQ::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CS_REGISTER_REQ::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CS_REGISTER_REQ_descriptor_;
}

const CS_REGISTER_REQ& CS_REGISTER_REQ::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Chat_2eproto();
  return *default_instance_;
}

CS_REGISTER_REQ* CS_REGISTER_REQ::default_instance_ = NULL;

CS_REGISTER_REQ* CS_REGISTER_REQ::New(::google::protobuf::Arena* arena) const {
  CS_REGISTER_REQ* n = new CS_REGISTER_REQ;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CS_REGISTER_REQ::Clear() {
// @@protoc_insertion_point(message_clear_start:CS_REGISTER_REQ)
}

bool CS_REGISTER_REQ::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CS_REGISTER_REQ)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
  }
success:
  // @@protoc_insertion_point(parse_success:CS_REGISTER_REQ)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CS_REGISTER_REQ)
  return false;
#undef DO_
}

void CS_REGISTER_REQ::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CS_REGISTER_REQ)
  // @@protoc_insertion_point(serialize_end:CS_REGISTER_REQ)
}

::google::protobuf::uint8* CS_REGISTER_REQ::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CS_REGISTER_REQ)
  // @@protoc_insertion_point(serialize_to_array_end:CS_REGISTER_REQ)
  return target;
}

int CS_REGISTER_REQ::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:CS_REGISTER_REQ)
  int total_size = 0;

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CS_REGISTER_REQ::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CS_REGISTER_REQ)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const CS_REGISTER_REQ* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CS_REGISTER_REQ>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CS_REGISTER_REQ)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CS_REGISTER_REQ)
    MergeFrom(*source);
  }
}

void CS_REGISTER_REQ::MergeFrom(const CS_REGISTER_REQ& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CS_REGISTER_REQ)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
}

void CS_REGISTER_REQ::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CS_REGISTER_REQ)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CS_REGISTER_REQ::CopyFrom(const CS_REGISTER_REQ& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CS_REGISTER_REQ)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CS_REGISTER_REQ::IsInitialized() const {

  return true;
}

void CS_REGISTER_REQ::Swap(CS_REGISTER_REQ* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CS_REGISTER_REQ::InternalSwap(CS_REGISTER_REQ* other) {
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CS_REGISTER_REQ::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CS_REGISTER_REQ_descriptor_;
  metadata.reflection = CS_REGISTER_REQ_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CS_REGISTER_REQ

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SC_REGISTER_RSP::SC_REGISTER_RSP()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SC_REGISTER_RSP)
}

void SC_REGISTER_RSP::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

SC_REGISTER_RSP::SC_REGISTER_RSP(const SC_REGISTER_RSP& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SC_REGISTER_RSP)
}

void SC_REGISTER_RSP::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
}

SC_REGISTER_RSP::~SC_REGISTER_RSP() {
  // @@protoc_insertion_point(destructor:SC_REGISTER_RSP)
  SharedDtor();
}

void SC_REGISTER_RSP::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SC_REGISTER_RSP::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SC_REGISTER_RSP::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SC_REGISTER_RSP_descriptor_;
}

const SC_REGISTER_RSP& SC_REGISTER_RSP::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Chat_2eproto();
  return *default_instance_;
}

SC_REGISTER_RSP* SC_REGISTER_RSP::default_instance_ = NULL;

SC_REGISTER_RSP* SC_REGISTER_RSP::New(::google::protobuf::Arena* arena) const {
  SC_REGISTER_RSP* n = new SC_REGISTER_RSP;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SC_REGISTER_RSP::Clear() {
// @@protoc_insertion_point(message_clear_start:SC_REGISTER_RSP)
}

bool SC_REGISTER_RSP::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SC_REGISTER_RSP)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
  }
success:
  // @@protoc_insertion_point(parse_success:SC_REGISTER_RSP)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SC_REGISTER_RSP)
  return false;
#undef DO_
}

void SC_REGISTER_RSP::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SC_REGISTER_RSP)
  // @@protoc_insertion_point(serialize_end:SC_REGISTER_RSP)
}

::google::protobuf::uint8* SC_REGISTER_RSP::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SC_REGISTER_RSP)
  // @@protoc_insertion_point(serialize_to_array_end:SC_REGISTER_RSP)
  return target;
}

int SC_REGISTER_RSP::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:SC_REGISTER_RSP)
  int total_size = 0;

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SC_REGISTER_RSP::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SC_REGISTER_RSP)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const SC_REGISTER_RSP* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const SC_REGISTER_RSP>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SC_REGISTER_RSP)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SC_REGISTER_RSP)
    MergeFrom(*source);
  }
}

void SC_REGISTER_RSP::MergeFrom(const SC_REGISTER_RSP& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SC_REGISTER_RSP)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
}

void SC_REGISTER_RSP::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SC_REGISTER_RSP)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SC_REGISTER_RSP::CopyFrom(const SC_REGISTER_RSP& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC_REGISTER_RSP)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SC_REGISTER_RSP::IsInitialized() const {

  return true;
}

void SC_REGISTER_RSP::Swap(SC_REGISTER_RSP* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SC_REGISTER_RSP::InternalSwap(SC_REGISTER_RSP* other) {
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SC_REGISTER_RSP::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SC_REGISTER_RSP_descriptor_;
  metadata.reflection = SC_REGISTER_RSP_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SC_REGISTER_RSP

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
