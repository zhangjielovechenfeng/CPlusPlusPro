// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: CSProtoPkgDef.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "CSProtoPkgDef.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace CSProtocol {

namespace {

const ::google::protobuf::Descriptor* CSMsgPkg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSMsgPkg_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_CSProtoPkgDef_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_CSProtoPkgDef_2eproto() {
  protobuf_AddDesc_CSProtoPkgDef_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "CSProtoPkgDef.proto");
  GOOGLE_CHECK(file != NULL);
  CSMsgPkg_descriptor_ = file->message_type(0);
  static const int CSMsgPkg_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMsgPkg, msgid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMsgPkg, pkgbodylen_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMsgPkg, csmsgpkgbody_),
  };
  CSMsgPkg_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CSMsgPkg_descriptor_,
      CSMsgPkg::default_instance_,
      CSMsgPkg_offsets_,
      -1,
      -1,
      -1,
      sizeof(CSMsgPkg),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMsgPkg, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMsgPkg, _is_default_instance_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_CSProtoPkgDef_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CSMsgPkg_descriptor_, &CSMsgPkg::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_CSProtoPkgDef_2eproto() {
  delete CSMsgPkg::default_instance_;
  delete CSMsgPkg_reflection_;
}

void protobuf_AddDesc_CSProtoPkgDef_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_CSProtoPkgDef_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::CSProtocol::protobuf_AddDesc_CSProtoPkgBodyDef_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\023CSProtoPkgDef.proto\022\nCSProtocol\032\027CSPro"
    "toPkgBodyDef.proto\"]\n\010CSMsgPkg\022\r\n\005msgID\030"
    "\001 \001(\r\022\022\n\npkgBodyLen\030\002 \001(\r\022.\n\014csMsgPkgBod"
    "y\030\003 \001(\0132\030.CSProtocol.CSMsgPkgBodyP\000b\006pro"
    "to3", 163);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "CSProtoPkgDef.proto", &protobuf_RegisterTypes);
  CSMsgPkg::default_instance_ = new CSMsgPkg();
  CSMsgPkg::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_CSProtoPkgDef_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_CSProtoPkgDef_2eproto {
  StaticDescriptorInitializer_CSProtoPkgDef_2eproto() {
    protobuf_AddDesc_CSProtoPkgDef_2eproto();
  }
} static_descriptor_initializer_CSProtoPkgDef_2eproto_;

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CSMsgPkg::kMsgIDFieldNumber;
const int CSMsgPkg::kPkgBodyLenFieldNumber;
const int CSMsgPkg::kCsMsgPkgBodyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CSMsgPkg::CSMsgPkg()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CSProtocol.CSMsgPkg)
}

void CSMsgPkg::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  csmsgpkgbody_ = const_cast< ::CSProtocol::CSMsgPkgBody*>(&::CSProtocol::CSMsgPkgBody::default_instance());
}

CSMsgPkg::CSMsgPkg(const CSMsgPkg& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CSProtocol.CSMsgPkg)
}

void CSMsgPkg::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  msgid_ = 0u;
  pkgbodylen_ = 0u;
  csmsgpkgbody_ = NULL;
}

CSMsgPkg::~CSMsgPkg() {
  // @@protoc_insertion_point(destructor:CSProtocol.CSMsgPkg)
  SharedDtor();
}

void CSMsgPkg::SharedDtor() {
  if (this != default_instance_) {
    delete csmsgpkgbody_;
  }
}

void CSMsgPkg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSMsgPkg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSMsgPkg_descriptor_;
}

const CSMsgPkg& CSMsgPkg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CSProtoPkgDef_2eproto();
  return *default_instance_;
}

CSMsgPkg* CSMsgPkg::default_instance_ = NULL;

CSMsgPkg* CSMsgPkg::New(::google::protobuf::Arena* arena) const {
  CSMsgPkg* n = new CSMsgPkg;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CSMsgPkg::Clear() {
// @@protoc_insertion_point(message_clear_start:CSProtocol.CSMsgPkg)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(CSMsgPkg, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<CSMsgPkg*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(msgid_, pkgbodylen_);
  if (GetArenaNoVirtual() == NULL && csmsgpkgbody_ != NULL) delete csmsgpkgbody_;
  csmsgpkgbody_ = NULL;

#undef ZR_HELPER_
#undef ZR_

}

bool CSMsgPkg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CSProtocol.CSMsgPkg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 msgID = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &msgid_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_pkgBodyLen;
        break;
      }

      // optional uint32 pkgBodyLen = 2;
      case 2: {
        if (tag == 16) {
         parse_pkgBodyLen:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pkgbodylen_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_csMsgPkgBody;
        break;
      }

      // optional .CSProtocol.CSMsgPkgBody csMsgPkgBody = 3;
      case 3: {
        if (tag == 26) {
         parse_csMsgPkgBody:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_csmsgpkgbody()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CSProtocol.CSMsgPkg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CSProtocol.CSMsgPkg)
  return false;
#undef DO_
}

void CSMsgPkg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CSProtocol.CSMsgPkg)
  // optional uint32 msgID = 1;
  if (this->msgid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->msgid(), output);
  }

  // optional uint32 pkgBodyLen = 2;
  if (this->pkgbodylen() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->pkgbodylen(), output);
  }

  // optional .CSProtocol.CSMsgPkgBody csMsgPkgBody = 3;
  if (this->has_csmsgpkgbody()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->csmsgpkgbody_, output);
  }

  // @@protoc_insertion_point(serialize_end:CSProtocol.CSMsgPkg)
}

::google::protobuf::uint8* CSMsgPkg::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CSProtocol.CSMsgPkg)
  // optional uint32 msgID = 1;
  if (this->msgid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->msgid(), target);
  }

  // optional uint32 pkgBodyLen = 2;
  if (this->pkgbodylen() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->pkgbodylen(), target);
  }

  // optional .CSProtocol.CSMsgPkgBody csMsgPkgBody = 3;
  if (this->has_csmsgpkgbody()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->csmsgpkgbody_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:CSProtocol.CSMsgPkg)
  return target;
}

int CSMsgPkg::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:CSProtocol.CSMsgPkg)
  int total_size = 0;

  // optional uint32 msgID = 1;
  if (this->msgid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->msgid());
  }

  // optional uint32 pkgBodyLen = 2;
  if (this->pkgbodylen() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->pkgbodylen());
  }

  // optional .CSProtocol.CSMsgPkgBody csMsgPkgBody = 3;
  if (this->has_csmsgpkgbody()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->csmsgpkgbody_);
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSMsgPkg::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CSProtocol.CSMsgPkg)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const CSMsgPkg* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CSMsgPkg>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CSProtocol.CSMsgPkg)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CSProtocol.CSMsgPkg)
    MergeFrom(*source);
  }
}

void CSMsgPkg::MergeFrom(const CSMsgPkg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CSProtocol.CSMsgPkg)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.msgid() != 0) {
    set_msgid(from.msgid());
  }
  if (from.pkgbodylen() != 0) {
    set_pkgbodylen(from.pkgbodylen());
  }
  if (from.has_csmsgpkgbody()) {
    mutable_csmsgpkgbody()->::CSProtocol::CSMsgPkgBody::MergeFrom(from.csmsgpkgbody());
  }
}

void CSMsgPkg::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CSProtocol.CSMsgPkg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSMsgPkg::CopyFrom(const CSMsgPkg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CSProtocol.CSMsgPkg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSMsgPkg::IsInitialized() const {

  return true;
}

void CSMsgPkg::Swap(CSMsgPkg* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CSMsgPkg::InternalSwap(CSMsgPkg* other) {
  std::swap(msgid_, other->msgid_);
  std::swap(pkgbodylen_, other->pkgbodylen_);
  std::swap(csmsgpkgbody_, other->csmsgpkgbody_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CSMsgPkg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSMsgPkg_descriptor_;
  metadata.reflection = CSMsgPkg_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CSMsgPkg

// optional uint32 msgID = 1;
void CSMsgPkg::clear_msgid() {
  msgid_ = 0u;
}
 ::google::protobuf::uint32 CSMsgPkg::msgid() const {
  // @@protoc_insertion_point(field_get:CSProtocol.CSMsgPkg.msgID)
  return msgid_;
}
 void CSMsgPkg::set_msgid(::google::protobuf::uint32 value) {
  
  msgid_ = value;
  // @@protoc_insertion_point(field_set:CSProtocol.CSMsgPkg.msgID)
}

// optional uint32 pkgBodyLen = 2;
void CSMsgPkg::clear_pkgbodylen() {
  pkgbodylen_ = 0u;
}
 ::google::protobuf::uint32 CSMsgPkg::pkgbodylen() const {
  // @@protoc_insertion_point(field_get:CSProtocol.CSMsgPkg.pkgBodyLen)
  return pkgbodylen_;
}
 void CSMsgPkg::set_pkgbodylen(::google::protobuf::uint32 value) {
  
  pkgbodylen_ = value;
  // @@protoc_insertion_point(field_set:CSProtocol.CSMsgPkg.pkgBodyLen)
}

// optional .CSProtocol.CSMsgPkgBody csMsgPkgBody = 3;
bool CSMsgPkg::has_csmsgpkgbody() const {
  return !_is_default_instance_ && csmsgpkgbody_ != NULL;
}
void CSMsgPkg::clear_csmsgpkgbody() {
  if (GetArenaNoVirtual() == NULL && csmsgpkgbody_ != NULL) delete csmsgpkgbody_;
  csmsgpkgbody_ = NULL;
}
const ::CSProtocol::CSMsgPkgBody& CSMsgPkg::csmsgpkgbody() const {
  // @@protoc_insertion_point(field_get:CSProtocol.CSMsgPkg.csMsgPkgBody)
  return csmsgpkgbody_ != NULL ? *csmsgpkgbody_ : *default_instance_->csmsgpkgbody_;
}
::CSProtocol::CSMsgPkgBody* CSMsgPkg::mutable_csmsgpkgbody() {
  
  if (csmsgpkgbody_ == NULL) {
    csmsgpkgbody_ = new ::CSProtocol::CSMsgPkgBody;
  }
  // @@protoc_insertion_point(field_mutable:CSProtocol.CSMsgPkg.csMsgPkgBody)
  return csmsgpkgbody_;
}
::CSProtocol::CSMsgPkgBody* CSMsgPkg::release_csmsgpkgbody() {
  // @@protoc_insertion_point(field_release:CSProtocol.CSMsgPkg.csMsgPkgBody)
  
  ::CSProtocol::CSMsgPkgBody* temp = csmsgpkgbody_;
  csmsgpkgbody_ = NULL;
  return temp;
}
void CSMsgPkg::set_allocated_csmsgpkgbody(::CSProtocol::CSMsgPkgBody* csmsgpkgbody) {
  delete csmsgpkgbody_;
  csmsgpkgbody_ = csmsgpkgbody;
  if (csmsgpkgbody) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:CSProtocol.CSMsgPkg.csMsgPkgBody)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace CSProtocol

// @@protoc_insertion_point(global_scope)
